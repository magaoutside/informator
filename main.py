import asyncio
import re
from pyrogram import Client, filters
from pyrogram.types import Message, ChatPermissions
from pyrogram.enums import ChatMemberStatus

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ API
API_ID = 111111 #–∑–∞–º–µ–Ω–∏—Ç—å —Å my.telegram.org
API_HASH = "xxxxxx" #–∑–∞–º–µ–Ω–∏—Ç—å —Å my.telegram.org

group_settings = {}
last_processed_messages = {}
active_alerts = {}

app = Client(
    "my_userbot", 
    api_id=API_ID, 
    api_hash=API_HASH
)

@app.on_message(filters.group & filters.new_chat_members)
async def on_new_member(client, message: Message):
    for member in message.new_chat_members:
        if member.id == (await client.get_me()).id:
            await client.send_message(
                message.chat.id,
                "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø - –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –í–∞—Å –∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ–± –æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ë–ü–õ–ê.\n"
                "–ß—Ç–æ–±—ã –º–µ–Ω—è –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start –≤ —á–∞—Ç (–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–≥—É—Ç —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã)"
            )
            break

@app.on_message(filters.group & filters.command("start"))
async def start_command(client, message: Message):
    try:
        member = await client.get_chat_member(message.chat.id, message.from_user.id)
        if member.status not in [ChatMemberStatus.ADMINISTRATOR, ChatMemberStatus.OWNER]:
            await message.reply("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –º–µ–Ω—è!")
            return
    except Exception:
        await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞—à–∏ –ø—Ä–∞–≤–∞!")
        return

    await message.reply(
        "üîë –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):\n"
        "–ü—Ä–∏–º–µ—Ä: –ù–∏–∫–æ–ª—å—Å–∫–æ–µ, –¢–∞–≤—Ä–æ–≤–æ, –î—É–±–æ–≤–æ–µ"
    )
    
    group_settings[message.chat.id] = {"waiting_for_keywords": True, "admin_id": message.from_user.id}

@app.on_message(filters.group & filters.text & ~filters.command("start"))
async def handle_keywords(client, message: Message):
    chat_id = message.chat.id
    
    if (chat_id in group_settings and 
        group_settings[chat_id].get("waiting_for_keywords") and 
        group_settings[chat_id].get("admin_id") == message.from_user.id):
        
        group_settings[chat_id]["waiting_for_keywords"] = False
        
        keywords = [word.strip() for word in message.text.split(",") if word.strip()]
        
        if not keywords:
            await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.")
            return
        
        if chat_id not in group_settings:
            group_settings[chat_id] = {}
        group_settings[chat_id]["keywords"] = keywords
        
        await message.reply(
            f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n"
            f"–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {', '.join(keywords)}\n"
        )
        
        asyncio.create_task(monitor_channel(client, chat_id, keywords))

async def monitor_channel(client, chat_id, keywords):
    channel_id = -1002820362754  # ID –∫–∞–Ω–∞–ª–∞ @BelgorodDRONE
    
    try:
        async for message in client.get_chat_history(channel_id, limit=1):
            if message:
                last_processed_messages[chat_id] = message.id
                break
        
        print(f"üöÄ –ù–∞—á–∞–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞–Ω–∞–ª–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã {chat_id} —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏: {keywords}")
        
        while True:
            try:
                new_messages = []
                async for message in client.get_chat_history(channel_id, limit=5):
                    if message.id > last_processed_messages.get(chat_id, 0):
                        new_messages.append(message)
                
                for message in reversed(new_messages):
                    if message.text:
                        await check_and_forward_message(client, chat_id, keywords, message)
                        last_processed_messages[chat_id] = message.id
                
                await asyncio.sleep(10)
                
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã {chat_id}: {e}")
                await asyncio.sleep(60)
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–∞–Ω–∞–ª–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã {chat_id}: {e}")

async def check_and_forward_message(client, chat_id, keywords, message):
    text = message.text.lower()
    
    keyword_found = None
    for keyword in keywords:
        keyword_lower = keyword.lower()
        if (keyword_lower in text.split() or 
            keyword_lower in re.findall(r'\b\w+\b', text) or
            f" {keyword_lower} " in f" {text} "):
            
            keyword_found = keyword
            break
    
    has_otboy = any(word in text for word in ["–æ—Ç–±–æ–π", "–æ—Ç–±–æ—è", "–æ—Ç–±–æ—é"])
    
    if keyword_found and not has_otboy:
        try:
            await client.send_message(chat_id, f"{message.text}")
            print(f"üö® –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ç—Ä–µ–≤–æ–≥–∞ –≤ –≥—Ä—É–ø–ø—É {chat_id} –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É '{keyword_found}'")
            
            active_alerts[chat_id] = {
                "keyword": keyword_found,
                "message_id": message.id,
                "timestamp": asyncio.get_event_loop().time()
            }
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É {chat_id}: {e}")
    
    elif keyword_found and has_otboy:
        try:
            await client.send_message(chat_id, f"{message.text}")
            print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–±–æ–π –≤ –≥—Ä—É–ø–ø—É {chat_id} –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É '{keyword_found}'")
            
            if chat_id in active_alerts:
                del active_alerts[chat_id]
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–±–æ—è –≤ –≥—Ä—É–ø–ø—É {chat_id}: {e}")
    
    elif has_otboy and chat_id in active_alerts:
        try:
            await client.send_message(chat_id, f"{message.text}")
            print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–±–æ–π –≤ –≥—Ä—É–ø–ø—É {chat_id} (–±–µ–∑ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞)")
            
            del active_alerts[chat_id]
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–±–æ—è –≤ –≥—Ä—É–ø–ø—É {chat_id}: {e}")

@app.on_message(filters.private)
async def ignore_private_messages(client, message: Message):
    pass

if __name__ == "__main__":
    print("–Æ–∑–µ—Ä-–±–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    app.run()
